/**
    Dialog for choose and open texture file (Nuke3D Editor)
    Copyright (C) 2019 Anton "Vuvk" Shcherbatykh <vuvk69@gmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package com.vuvk.n3d.editor.forms;

import com.vuvk.n3d.Const;
import com.vuvk.n3d.Utils;
import com.vuvk.n3d.components.PanelImagePreview;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Anton "Vuvk" Shcherbatykh
 */
public class DialogOpenTexture extends javax.swing.JDialog {    
    /** выбранный файл */
    public static File selectedFile = null;
    /** путь до ресурсов */
    public static File currentPath = FileUtils.getUserDirectory();
    /** поле для рисования предпросмотра */
    static PanelImagePreview panelImagePreview;
    
    
    /**
     * Creates new form DialogOpenTexture
     */
    public DialogOpenTexture(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        FileNameExtensionFilter filterAll  = new FileNameExtensionFilter("All knowns formats", "jpg", "jpeg", "png", "bmp", "gif");
        FileNameExtensionFilter filterJpeg = new FileNameExtensionFilter("JPEG image", "jpg", "jpeg");
        FileNameExtensionFilter filterPng  = new FileNameExtensionFilter("PNG image", "png");
        FileNameExtensionFilter filterBmp  = new FileNameExtensionFilter("BMP image", "bmp");
        FileNameExtensionFilter filterGif  = new FileNameExtensionFilter("GIF image", "gif");
        FileChooser.removeChoosableFileFilter(FileChooser.getFileFilter());
        FileChooser.setFileFilter(filterAll);
        FileChooser.addChoosableFileFilter(filterJpeg);
        FileChooser.addChoosableFileFilter(filterPng);
        FileChooser.addChoosableFileFilter(filterBmp);
        FileChooser.addChoosableFileFilter(filterGif);
        
        panelImagePreview = new PanelImagePreview();
        panelImagePreview.setSize(512, 512);
        PanelPreview.add(panelImagePreview);
        panelImagePreview.setLocation(5, 16);          
                
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        PanelPreview = new javax.swing.JPanel();
        CheckStretched = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select texture for import");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        FileChooser.setCurrentDirectory(new java.io.File("/home/tai-prg3/netbeans-8.2/bin/~"));
        FileChooser.setDialogTitle("");
        FileChooser.setFileFilter(null);
        FileChooser.setAutoscrolls(true);
        FileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileChooserActionPerformed(evt);
            }
        });
        FileChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                FileChooserPropertyChange(evt);
            }
        });

        PanelPreview.setBorder(javax.swing.BorderFactory.createTitledBorder("Предпросмотр"));
        PanelPreview.setDoubleBuffered(false);

        javax.swing.GroupLayout PanelPreviewLayout = new javax.swing.GroupLayout(PanelPreview);
        PanelPreview.setLayout(PanelPreviewLayout);
        PanelPreviewLayout.setHorizontalGroup(
            PanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );
        PanelPreviewLayout.setVerticalGroup(
            PanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );

        CheckStretched.setText("Растянуть");
        CheckStretched.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CheckStretchedStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(FileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CheckStretched)
                    .addComponent(PanelPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(FileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckStretched)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileChooserActionPerformed
        switch (evt.getActionCommand()) {
            // нажато "Открыть"
            case JFileChooser.APPROVE_SELECTION :
                selectedFile = FileChooser.getSelectedFile();        
                currentPath = FileChooser.getCurrentDirectory();
                break;
                
            // нажато "отмена
            case JFileChooser.CANCEL_SELECTION : 
                selectedFile = null;
                break;
        }
        
        dispose();
    }//GEN-LAST:event_FileChooserActionPerformed

    private void FileChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_FileChooserPropertyChange
        switch (evt.getPropertyName()) {                
            // выбран файл
            case JFileChooser.SELECTED_FILE_CHANGED_PROPERTY :
                panelImagePreview.image = null;
                
                File file = FileChooser.getSelectedFile();
                if (file != null && file.isFile()) {
                    // если файл является текстурой, то попробовать его загрузить в предпросмотр
                    if (Const.TEXTURE_EXTS.contains(Utils.getFileExtension(file))) {
                        try {
                            panelImagePreview.image = Utils.prepareImage(ImageIO.read(file));
                        } catch (IOException ex) {
                            Logger.getLogger(DialogOpenTexture.class.getName()).log(Level.SEVERE, null, ex);
                            panelImagePreview.image = null;
                        }
                    }                   
                }
                
                panelImagePreview.redraw();
                break;
        }
    }//GEN-LAST:event_FileChooserPropertyChange

    private void CheckStretchedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CheckStretchedStateChanged
        panelImagePreview.isStretched = CheckStretched.isSelected();
        panelImagePreview.redraw();
    }//GEN-LAST:event_CheckStretchedStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        selectedFile = null;
        FileChooser.setCurrentDirectory(currentPath);
    }//GEN-LAST:event_formWindowOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckStretched;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JPanel PanelPreview;
    // End of variables declaration//GEN-END:variables
}
